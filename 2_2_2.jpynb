{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "206203e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "83cd5a04",
   "metadata": {},
   "outputs": [],
   "source": [
    "url = './iris.data'\n",
    "iris = np.genfromtxt(url, delimiter = ',', dtype = ['f4','f4','f4','f4','U16'])\n",
    "df = pd.read_csv('iris.data')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "f116a935",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>d</th>\n",
       "      <th>e</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     a    b    c    d            e\n",
       "0  5.1  3.5  1.4  0.2  Iris-setosa\n",
       "1  4.9  3.0  1.4  0.2  Iris-setosa\n",
       "2  4.7  3.2  1.3  0.2  Iris-setosa\n",
       "3  4.6  3.1  1.5  0.2  Iris-setosa\n",
       "4  5.0  3.6  1.4  0.2  Iris-setosa"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "e257537f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>d</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.843333</td>\n",
       "      <td>3.054000</td>\n",
       "      <td>3.758667</td>\n",
       "      <td>1.198667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.828066</td>\n",
       "      <td>0.433594</td>\n",
       "      <td>1.764420</td>\n",
       "      <td>0.763161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.300000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5.100000</td>\n",
       "      <td>2.800000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>0.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.800000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.350000</td>\n",
       "      <td>1.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.400000</td>\n",
       "      <td>3.300000</td>\n",
       "      <td>5.100000</td>\n",
       "      <td>1.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.900000</td>\n",
       "      <td>4.400000</td>\n",
       "      <td>6.900000</td>\n",
       "      <td>2.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                a           b           c           d\n",
       "count  150.000000  150.000000  150.000000  150.000000\n",
       "mean     5.843333    3.054000    3.758667    1.198667\n",
       "std      0.828066    0.433594    1.764420    0.763161\n",
       "min      4.300000    2.000000    1.000000    0.100000\n",
       "25%      5.100000    2.800000    1.600000    0.300000\n",
       "50%      5.800000    3.000000    4.350000    1.300000\n",
       "75%      6.400000    3.300000    5.100000    1.800000\n",
       "max      7.900000    4.400000    6.900000    2.500000"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "9d6cd0bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot.hist(edgecolor='k', alpha = 0.99)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "6a6b1fc9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'d'}, xlabel='e'>"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.boxplot('a',by='e')\n",
    "df.boxplot('b',by='e')\n",
    "df.boxplot('c',by='e')\n",
    "df.boxplot('d',by='e')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "id": "c31f6c9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>d</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>e</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Iris-setosa</th>\n",
       "      <td>5.8</td>\n",
       "      <td>4.4</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iris-versicolor</th>\n",
       "      <td>7.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iris-virginica</th>\n",
       "      <td>7.9</td>\n",
       "      <td>3.8</td>\n",
       "      <td>6.9</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   a    b    c    d\n",
       "e                                  \n",
       "Iris-setosa      5.8  4.4  1.9  0.6\n",
       "Iris-versicolor  7.0  3.4  5.1  1.8\n",
       "Iris-virginica   7.9  3.8  6.9  2.5"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('e').max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "id": "137aae66",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>d</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>e</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Iris-setosa</th>\n",
       "      <td>4.3</td>\n",
       "      <td>2.3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iris-versicolor</th>\n",
       "      <td>4.9</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iris-virginica</th>\n",
       "      <td>4.9</td>\n",
       "      <td>2.2</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   a    b    c    d\n",
       "e                                  \n",
       "Iris-setosa      4.3  2.3  1.0  0.1\n",
       "Iris-versicolor  4.9  2.0  3.0  1.0\n",
       "Iris-virginica   4.9  2.2  4.5  1.4"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('e').min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "id": "aa541256",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>d</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>e</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Iris-setosa</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1.50</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iris-versicolor</th>\n",
       "      <td>5.9</td>\n",
       "      <td>2.8</td>\n",
       "      <td>4.35</td>\n",
       "      <td>1.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iris-virginica</th>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.55</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   a    b     c    d\n",
       "e                                   \n",
       "Iris-setosa      5.0  3.4  1.50  0.2\n",
       "Iris-versicolor  5.9  2.8  4.35  1.3\n",
       "Iris-virginica   6.5  3.0  5.55  2.0"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('e').median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "cd2e0b49",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>d</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>e</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Iris-setosa</th>\n",
       "      <td>4.800</td>\n",
       "      <td>3.125</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iris-versicolor</th>\n",
       "      <td>5.600</td>\n",
       "      <td>2.525</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iris-virginica</th>\n",
       "      <td>6.225</td>\n",
       "      <td>2.800</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     a      b    c    d\n",
       "e                                      \n",
       "Iris-setosa      4.800  3.125  1.4  0.2\n",
       "Iris-versicolor  5.600  2.525  4.0  1.2\n",
       "Iris-virginica   6.225  2.800  5.1  1.8"
      ]
     },
     "execution_count": 220,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('e').quantile(0.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "id": "fa2e9312",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>d</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>e</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Iris-setosa</th>\n",
       "      <td>5.2</td>\n",
       "      <td>3.675</td>\n",
       "      <td>1.575</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iris-versicolor</th>\n",
       "      <td>6.3</td>\n",
       "      <td>3.000</td>\n",
       "      <td>4.600</td>\n",
       "      <td>1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iris-virginica</th>\n",
       "      <td>6.9</td>\n",
       "      <td>3.175</td>\n",
       "      <td>5.875</td>\n",
       "      <td>2.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   a      b      c    d\n",
       "e                                      \n",
       "Iris-setosa      5.2  3.675  1.575  0.3\n",
       "Iris-versicolor  6.3  3.000  4.600  1.5\n",
       "Iris-virginica   6.9  3.175  5.875  2.3"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('e').quantile(0.75)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "id": "d081cde0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"8\" halign=\"left\">a</th>\n",
       "      <th colspan=\"8\" halign=\"left\">b</th>\n",
       "      <th colspan=\"8\" halign=\"left\">c</th>\n",
       "      <th colspan=\"8\" halign=\"left\">d</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>e</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Iris-setosa</th>\n",
       "      <td>50.0</td>\n",
       "      <td>5.006</td>\n",
       "      <td>0.352490</td>\n",
       "      <td>4.3</td>\n",
       "      <td>4.800</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>5.8</td>\n",
       "      <td>50.0</td>\n",
       "      <td>3.418</td>\n",
       "      <td>0.381024</td>\n",
       "      <td>2.3</td>\n",
       "      <td>3.125</td>\n",
       "      <td>3.4</td>\n",
       "      <td>3.675</td>\n",
       "      <td>4.4</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1.464</td>\n",
       "      <td>0.173511</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.50</td>\n",
       "      <td>1.575</td>\n",
       "      <td>1.9</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0.244</td>\n",
       "      <td>0.107210</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iris-versicolor</th>\n",
       "      <td>50.0</td>\n",
       "      <td>5.936</td>\n",
       "      <td>0.516171</td>\n",
       "      <td>4.9</td>\n",
       "      <td>5.600</td>\n",
       "      <td>5.9</td>\n",
       "      <td>6.3</td>\n",
       "      <td>7.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>2.770</td>\n",
       "      <td>0.313798</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.525</td>\n",
       "      <td>2.8</td>\n",
       "      <td>3.000</td>\n",
       "      <td>3.4</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.260</td>\n",
       "      <td>0.469911</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.35</td>\n",
       "      <td>4.600</td>\n",
       "      <td>5.1</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1.326</td>\n",
       "      <td>0.197753</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iris-virginica</th>\n",
       "      <td>50.0</td>\n",
       "      <td>6.588</td>\n",
       "      <td>0.635880</td>\n",
       "      <td>4.9</td>\n",
       "      <td>6.225</td>\n",
       "      <td>6.5</td>\n",
       "      <td>6.9</td>\n",
       "      <td>7.9</td>\n",
       "      <td>50.0</td>\n",
       "      <td>2.974</td>\n",
       "      <td>0.322497</td>\n",
       "      <td>2.2</td>\n",
       "      <td>2.800</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.175</td>\n",
       "      <td>3.8</td>\n",
       "      <td>50.0</td>\n",
       "      <td>5.552</td>\n",
       "      <td>0.551895</td>\n",
       "      <td>4.5</td>\n",
       "      <td>5.1</td>\n",
       "      <td>5.55</td>\n",
       "      <td>5.875</td>\n",
       "      <td>6.9</td>\n",
       "      <td>50.0</td>\n",
       "      <td>2.026</td>\n",
       "      <td>0.274650</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    a                                                 b  \\\n",
       "                count   mean       std  min    25%  50%  75%  max count   \n",
       "e                                                                         \n",
       "Iris-setosa      50.0  5.006  0.352490  4.3  4.800  5.0  5.2  5.8  50.0   \n",
       "Iris-versicolor  50.0  5.936  0.516171  4.9  5.600  5.9  6.3  7.0  50.0   \n",
       "Iris-virginica   50.0  6.588  0.635880  4.9  6.225  6.5  6.9  7.9  50.0   \n",
       "\n",
       "                                                                  c         \\\n",
       "                  mean       std  min    25%  50%    75%  max count   mean   \n",
       "e                                                                            \n",
       "Iris-setosa      3.418  0.381024  2.3  3.125  3.4  3.675  4.4  50.0  1.464   \n",
       "Iris-versicolor  2.770  0.313798  2.0  2.525  2.8  3.000  3.4  50.0  4.260   \n",
       "Iris-virginica   2.974  0.322497  2.2  2.800  3.0  3.175  3.8  50.0  5.552   \n",
       "\n",
       "                                                          d                   \\\n",
       "                      std  min  25%   50%    75%  max count   mean       std   \n",
       "e                                                                              \n",
       "Iris-setosa      0.173511  1.0  1.4  1.50  1.575  1.9  50.0  0.244  0.107210   \n",
       "Iris-versicolor  0.469911  3.0  4.0  4.35  4.600  5.1  50.0  1.326  0.197753   \n",
       "Iris-virginica   0.551895  4.5  5.1  5.55  5.875  6.9  50.0  2.026  0.274650   \n",
       "\n",
       "                                          \n",
       "                 min  25%  50%  75%  max  \n",
       "e                                         \n",
       "Iris-setosa      0.1  0.2  0.2  0.3  0.6  \n",
       "Iris-versicolor  1.0  1.2  1.3  1.5  1.8  \n",
       "Iris-virginica   1.4  1.8  2.0  2.3  2.5  "
      ]
     },
     "execution_count": 235,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.set_option('display.max_columns', None)\n",
    "df.groupby('e').describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21f35915",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
